package com.tsop.android.memory;

import com.tsop.games.memory.Card;
import com.tsop.games.memory.GameBoard;
import com.tsop.games.memory.Position;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView.ScaleType;

public class GameView extends View {

	private ImageButton[][] cards;
	
	private Context applicationContext;

	public GameView(Context context, AttributeSet attrs) {
		super(context, attrs);
		applicationContext = context;
		System.out.println("Calling GameView(context, attrs)");
	}
	
    public void CreateCardImages()//, OnClickListener clickListener)
    {
    	System.out.println("Calling CreateCardImages");
    	int screenWidth = getResources().getDisplayMetrics().widthPixels;
    	int screenHeight = getResources().getDisplayMetrics().heightPixels;
    	int spacing = scalePixels(2);
    	int cardWidth = scalePixels((int)((screenWidth - ((GameBoard.NUM_COLUMNS + 1) * spacing)) / GameBoard.NUM_COLUMNS));
    	int cardHeight = cardWidth;
    	cards = new ImageButton[GameBoard.NUM_COLUMNS][GameBoard.NUM_ROWS];
		for (int c = 0; c < GameBoard.NUM_COLUMNS; c++)
		{
	    	for (int r = 0; r < GameBoard.NUM_ROWS; r++)
	    	{
    			cards[c][r] = new ImageButton(applicationContext);
    			LayoutParams lp = new LayoutParams(51,51);
    			lp.gravity = Gravity.LEFT & Gravity.TOP;
    			lp.width = scalePixels(cardWidth);
    			lp.height = scalePixels(cardHeight);
    			
    			// TODO need to do my own scaling here
    			lp.topMargin = scalePixels(30 + ((cardWidth+spacing) * r));
    			lp.leftMargin = scalePixels(2 + (53 * c));
    			cards[c][r].setBackgroundDrawable(null);
    			cards[c][r].setLayoutParams(lp);
    			cards[c][r].setImageResource(R.drawable.back);
    			cards[c][r].setAdjustViewBounds(true);
    			cards[c][r].setScaleType(ScaleType.FIT_XY);
    			cards[c][r].setPadding(0,0,0,0);
    			cards[c][r].setClickable(true);
//    			cards[c][r].setOnClickListener(clickListener);
    			cards[c][r].setTag(new Position(c,r));
    			

//    	    	((FrameLayout)findViewById(R.id.gameFrameLayout)).addView(cards[c][r]);
    			
    		}
    	}
    }
    
    private int scalePixels(int dips)
    {
    	final float scale = applicationContext.getResources().getDisplayMetrics().density;
    	return (int)(dips / scale);
    }
	
	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		super.onDraw(canvas);
		Paint m_paint = new Paint();
		m_paint.setColor(0xFF888888);
		canvas.drawRect(new Rect(0,0,50,50), m_paint);
		System.out.println("GameView.onDraw called");
		
		for (int c = 0; c < GameBoard.NUM_COLUMNS; c++)
		{
	    	for (int r = 0; r < GameBoard.NUM_ROWS; r++)
	    	{
	    		cards[c][r].draw(canvas);
	    		canvas.drawRect(cards[c][r].getLeft(), cards[c][r].getTop(), cards[c][r].getBottom(), cards[c][r].getBottom(), m_paint);
    		}
    	}
	}

	//@Override
	public void UpdateGameBoard(int col, int row) {
//
//		// TODO this must be called from the main UI thread!!!!????
//		Card card= theGame.getGameBoard().getCardArray()[col][row];
//		if (card.getFlipped())
//		{
//			System.out.println("setting Image Resource to " + card.getDrawableId() + " on " + Integer.toString(col) + " " + Integer.toString(row) + ", VALUE = " + card.getCardValue());
//			cards[col][row].setImageResource(card.getDrawableId());
//		}
//		else
//		{
//			System.out.println("setting Image Resource to .back " + R.drawable.back + " on " + Integer.toString(col) + " " + Integer.toString(row) + ", VALUE = " + card.getCardValue());
//			cards[col][row].setImageResource(R.drawable.back);
//		}
	}
}
